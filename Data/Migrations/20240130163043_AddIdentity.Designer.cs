// <auto-generated />
using System;
using EntertainmentDB.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EntertainmentDB.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240130163043_AddIdentity")]
    partial class AddIdentity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ApplicationUserMedia", b =>
                {
                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("text");

                    b.Property<Guid>("FavouritesId")
                        .HasColumnType("uuid");

                    b.HasKey("ApplicationUserId", "FavouritesId");

                    b.HasIndex("FavouritesId");

                    b.ToTable("ApplicationUserMedia");
                });

            modelBuilder.Entity("BookCompany", b =>
                {
                    b.Property<Guid>("BooksPublishedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PublishersId")
                        .HasColumnType("uuid");

                    b.HasKey("BooksPublishedId", "PublishersId");

                    b.HasIndex("PublishersId");

                    b.ToTable("BookCompany");
                });

            modelBuilder.Entity("BookPerson", b =>
                {
                    b.Property<Guid>("AuthorsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BooksId")
                        .HasColumnType("uuid");

                    b.HasKey("AuthorsId", "BooksId");

                    b.HasIndex("BooksId");

                    b.ToTable("BookPerson");
                });

            modelBuilder.Entity("CompanyGame", b =>
                {
                    b.Property<Guid>("DevelopersId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GamesDevelopedId")
                        .HasColumnType("uuid");

                    b.HasKey("DevelopersId", "GamesDevelopedId");

                    b.HasIndex("GamesDevelopedId");

                    b.ToTable("CompanyGame");
                });

            modelBuilder.Entity("CompanyGame1", b =>
                {
                    b.Property<Guid>("GamesPublishedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PublishersId")
                        .HasColumnType("uuid");

                    b.HasKey("GamesPublishedId", "PublishersId");

                    b.HasIndex("PublishersId");

                    b.ToTable("CompanyGame1");
                });

            modelBuilder.Entity("CompanyMovie", b =>
                {
                    b.Property<Guid>("MoviesProducedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProducersId")
                        .HasColumnType("uuid");

                    b.HasKey("MoviesProducedId", "ProducersId");

                    b.HasIndex("ProducersId");

                    b.ToTable("CompanyMovie");
                });

            modelBuilder.Entity("EntertainmentDB.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("EntertainmentDB.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("EntertainmentDB.Models.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("EntertainmentDB.Models.Episode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<int>("EpisodeNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("SeasonId")
                        .HasColumnType("uuid");

                    b.Property<string>("Synopsis")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.ToTable("Episodes");
                });

            modelBuilder.Entity("EntertainmentDB.Models.Franchise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Franchises");
                });

            modelBuilder.Entity("EntertainmentDB.Models.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("EntertainmentDB.Models.Media", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<Guid?>("FranchiseId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FranchiseId");

                    b.ToTable("Media");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Media");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("EntertainmentDB.Models.Mode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Modes");
                });

            modelBuilder.Entity("EntertainmentDB.Models.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("EntertainmentDB.Models.Platform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("DeveloperId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("ReleaseDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("DeveloperId");

                    b.ToTable("Platforms");
                });

            modelBuilder.Entity("EntertainmentDB.Models.Season", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("NumberOfEpisodes")
                        .HasColumnType("integer");

                    b.Property<int>("SeasonNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("ShowId")
                        .HasColumnType("uuid");

                    b.Property<string>("Synopsis")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ShowId");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("EntertainmentDB.Models.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("FranchisePerson", b =>
                {
                    b.Property<Guid>("CreatorsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FranchisesCreatedId")
                        .HasColumnType("uuid");

                    b.HasKey("CreatorsId", "FranchisesCreatedId");

                    b.HasIndex("FranchisesCreatedId");

                    b.ToTable("FranchisePerson");
                });

            modelBuilder.Entity("GameMode", b =>
                {
                    b.Property<Guid>("GamesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ModesId")
                        .HasColumnType("uuid");

                    b.HasKey("GamesId", "ModesId");

                    b.HasIndex("ModesId");

                    b.ToTable("GameMode");
                });

            modelBuilder.Entity("GamePerson", b =>
                {
                    b.Property<Guid>("DirectorsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GamesDirectedId")
                        .HasColumnType("uuid");

                    b.HasKey("DirectorsId", "GamesDirectedId");

                    b.HasIndex("GamesDirectedId");

                    b.ToTable("GamePerson");
                });

            modelBuilder.Entity("GamePlatform", b =>
                {
                    b.Property<Guid>("GamesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlatformsId")
                        .HasColumnType("uuid");

                    b.HasKey("GamesId", "PlatformsId");

                    b.HasIndex("PlatformsId");

                    b.ToTable("GamePlatform");
                });

            modelBuilder.Entity("GameTrack", b =>
                {
                    b.Property<Guid>("GamesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SoundtrackId")
                        .HasColumnType("uuid");

                    b.HasKey("GamesId", "SoundtrackId");

                    b.HasIndex("SoundtrackId");

                    b.ToTable("GameTrack");
                });

            modelBuilder.Entity("GenreMedia", b =>
                {
                    b.Property<Guid>("GenresId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MediaId")
                        .HasColumnType("uuid");

                    b.HasKey("GenresId", "MediaId");

                    b.HasIndex("MediaId");

                    b.ToTable("GenreMedia");
                });

            modelBuilder.Entity("MediaTag", b =>
                {
                    b.Property<Guid>("MediaId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("uuid");

                    b.HasKey("MediaId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("MediaTag");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MoviePerson", b =>
                {
                    b.Property<Guid>("MoviesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StarsId")
                        .HasColumnType("uuid");

                    b.HasKey("MoviesId", "StarsId");

                    b.HasIndex("StarsId");

                    b.ToTable("MoviePerson");
                });

            modelBuilder.Entity("MoviePerson1", b =>
                {
                    b.Property<Guid>("MoviesWrittenId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WritersId")
                        .HasColumnType("uuid");

                    b.HasKey("MoviesWrittenId", "WritersId");

                    b.HasIndex("WritersId");

                    b.ToTable("MoviePerson1");
                });

            modelBuilder.Entity("MoviePerson2", b =>
                {
                    b.Property<Guid>("DirectorsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MoviesDirectedId")
                        .HasColumnType("uuid");

                    b.HasKey("DirectorsId", "MoviesDirectedId");

                    b.HasIndex("MoviesDirectedId");

                    b.ToTable("MoviePerson2");
                });

            modelBuilder.Entity("MovieTrack", b =>
                {
                    b.Property<Guid>("MoviesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SoundtrackId")
                        .HasColumnType("uuid");

                    b.HasKey("MoviesId", "SoundtrackId");

                    b.HasIndex("SoundtrackId");

                    b.ToTable("MovieTrack");
                });

            modelBuilder.Entity("PersonShow", b =>
                {
                    b.Property<Guid>("ShowsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StarsId")
                        .HasColumnType("uuid");

                    b.HasKey("ShowsId", "StarsId");

                    b.HasIndex("StarsId");

                    b.ToTable("PersonShow");
                });

            modelBuilder.Entity("PersonShow1", b =>
                {
                    b.Property<Guid>("CreatorsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ShowsCreatedId")
                        .HasColumnType("uuid");

                    b.HasKey("CreatorsId", "ShowsCreatedId");

                    b.HasIndex("ShowsCreatedId");

                    b.ToTable("PersonShow1");
                });

            modelBuilder.Entity("PersonTrack", b =>
                {
                    b.Property<Guid>("ArtistsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("uuid");

                    b.HasKey("ArtistsId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("PersonTrack");
                });

            modelBuilder.Entity("ShowTrack", b =>
                {
                    b.Property<Guid>("ShowsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SoundtrackId")
                        .HasColumnType("uuid");

                    b.HasKey("ShowsId", "SoundtrackId");

                    b.HasIndex("SoundtrackId");

                    b.ToTable("ShowTrack");
                });

            modelBuilder.Entity("EntertainmentDB.Models.Book", b =>
                {
                    b.HasBaseType("EntertainmentDB.Models.Media");

                    b.Property<string>("Isbn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Book");
                });

            modelBuilder.Entity("EntertainmentDB.Models.Game", b =>
                {
                    b.HasBaseType("EntertainmentDB.Models.Media");

                    b.Property<string>("Synopsis")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Game");
                });

            modelBuilder.Entity("EntertainmentDB.Models.Movie", b =>
                {
                    b.HasBaseType("EntertainmentDB.Models.Media");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Synopsis")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("Media", t =>
                        {
                            t.Property("Synopsis")
                                .HasColumnName("Movie_Synopsis");
                        });

                    b.HasDiscriminator().HasValue("Movie");
                });

            modelBuilder.Entity("EntertainmentDB.Models.Show", b =>
                {
                    b.HasBaseType("EntertainmentDB.Models.Media");

                    b.Property<int>("NumberOfSeasons")
                        .HasColumnType("integer");

                    b.Property<string>("Synopsis")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("Media", t =>
                        {
                            t.Property("Synopsis")
                                .HasColumnName("Show_Synopsis");
                        });

                    b.HasDiscriminator().HasValue("Show");
                });

            modelBuilder.Entity("EntertainmentDB.Models.Track", b =>
                {
                    b.HasBaseType("EntertainmentDB.Models.Media");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("Media", t =>
                        {
                            t.Property("Duration")
                                .HasColumnName("Track_Duration");
                        });

                    b.HasDiscriminator().HasValue("Track");
                });

            modelBuilder.Entity("ApplicationUserMedia", b =>
                {
                    b.HasOne("EntertainmentDB.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntertainmentDB.Models.Media", null)
                        .WithMany()
                        .HasForeignKey("FavouritesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookCompany", b =>
                {
                    b.HasOne("EntertainmentDB.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksPublishedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntertainmentDB.Models.Company", null)
                        .WithMany()
                        .HasForeignKey("PublishersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookPerson", b =>
                {
                    b.HasOne("EntertainmentDB.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntertainmentDB.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompanyGame", b =>
                {
                    b.HasOne("EntertainmentDB.Models.Company", null)
                        .WithMany()
                        .HasForeignKey("DevelopersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntertainmentDB.Models.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesDevelopedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompanyGame1", b =>
                {
                    b.HasOne("EntertainmentDB.Models.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesPublishedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntertainmentDB.Models.Company", null)
                        .WithMany()
                        .HasForeignKey("PublishersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompanyMovie", b =>
                {
                    b.HasOne("EntertainmentDB.Models.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesProducedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntertainmentDB.Models.Company", null)
                        .WithMany()
                        .HasForeignKey("ProducersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EntertainmentDB.Models.Episode", b =>
                {
                    b.HasOne("EntertainmentDB.Models.Season", "Season")
                        .WithMany("Episodes")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");
                });

            modelBuilder.Entity("EntertainmentDB.Models.Media", b =>
                {
                    b.HasOne("EntertainmentDB.Models.Franchise", "Franchise")
                        .WithMany("Media")
                        .HasForeignKey("FranchiseId");

                    b.Navigation("Franchise");
                });

            modelBuilder.Entity("EntertainmentDB.Models.Platform", b =>
                {
                    b.HasOne("EntertainmentDB.Models.Company", "Developer")
                        .WithMany("PlatformsDeveloped")
                        .HasForeignKey("DeveloperId");

                    b.Navigation("Developer");
                });

            modelBuilder.Entity("EntertainmentDB.Models.Season", b =>
                {
                    b.HasOne("EntertainmentDB.Models.Show", "Show")
                        .WithMany("Seasons")
                        .HasForeignKey("ShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Show");
                });

            modelBuilder.Entity("FranchisePerson", b =>
                {
                    b.HasOne("EntertainmentDB.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("CreatorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntertainmentDB.Models.Franchise", null)
                        .WithMany()
                        .HasForeignKey("FranchisesCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameMode", b =>
                {
                    b.HasOne("EntertainmentDB.Models.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntertainmentDB.Models.Mode", null)
                        .WithMany()
                        .HasForeignKey("ModesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GamePerson", b =>
                {
                    b.HasOne("EntertainmentDB.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("DirectorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntertainmentDB.Models.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesDirectedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GamePlatform", b =>
                {
                    b.HasOne("EntertainmentDB.Models.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntertainmentDB.Models.Platform", null)
                        .WithMany()
                        .HasForeignKey("PlatformsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameTrack", b =>
                {
                    b.HasOne("EntertainmentDB.Models.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntertainmentDB.Models.Track", null)
                        .WithMany()
                        .HasForeignKey("SoundtrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenreMedia", b =>
                {
                    b.HasOne("EntertainmentDB.Models.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntertainmentDB.Models.Media", null)
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MediaTag", b =>
                {
                    b.HasOne("EntertainmentDB.Models.Media", null)
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntertainmentDB.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("EntertainmentDB.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EntertainmentDB.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EntertainmentDB.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("EntertainmentDB.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntertainmentDB.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EntertainmentDB.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MoviePerson", b =>
                {
                    b.HasOne("EntertainmentDB.Models.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntertainmentDB.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("StarsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MoviePerson1", b =>
                {
                    b.HasOne("EntertainmentDB.Models.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesWrittenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntertainmentDB.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("WritersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MoviePerson2", b =>
                {
                    b.HasOne("EntertainmentDB.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("DirectorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntertainmentDB.Models.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesDirectedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MovieTrack", b =>
                {
                    b.HasOne("EntertainmentDB.Models.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntertainmentDB.Models.Track", null)
                        .WithMany()
                        .HasForeignKey("SoundtrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PersonShow", b =>
                {
                    b.HasOne("EntertainmentDB.Models.Show", null)
                        .WithMany()
                        .HasForeignKey("ShowsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntertainmentDB.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("StarsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PersonShow1", b =>
                {
                    b.HasOne("EntertainmentDB.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("CreatorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntertainmentDB.Models.Show", null)
                        .WithMany()
                        .HasForeignKey("ShowsCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PersonTrack", b =>
                {
                    b.HasOne("EntertainmentDB.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("ArtistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntertainmentDB.Models.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShowTrack", b =>
                {
                    b.HasOne("EntertainmentDB.Models.Show", null)
                        .WithMany()
                        .HasForeignKey("ShowsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntertainmentDB.Models.Track", null)
                        .WithMany()
                        .HasForeignKey("SoundtrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EntertainmentDB.Models.Company", b =>
                {
                    b.Navigation("PlatformsDeveloped");
                });

            modelBuilder.Entity("EntertainmentDB.Models.Franchise", b =>
                {
                    b.Navigation("Media");
                });

            modelBuilder.Entity("EntertainmentDB.Models.Season", b =>
                {
                    b.Navigation("Episodes");
                });

            modelBuilder.Entity("EntertainmentDB.Models.Show", b =>
                {
                    b.Navigation("Seasons");
                });
#pragma warning restore 612, 618
        }
    }
}
